{"version":3,"sources":["reportWebVitals.ts","index.tsx","App.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById","useState","calc","setCalc","result","setResult","operadores","updateCalc","val","includes","length","eval","toString","deletarUltimoDigito","value","slice","calcular","criarDigitos","digitos","i","push","onClick","className"],"mappings":"sLAceA,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,MAEFC,SAASC,eAAe,SAM1Bd,K,smBCdA,SAASY,MACP,cAAwBG,oDAAS,IAAjC,mMAAOC,KAAP,cAAaC,QAAb,cACA,WAA4BF,oDAAS,IAArC,oMAAOG,OAAP,cAAeC,UAAf,cAEMC,WAAa,CAAC,IAAK,IAAK,IAAK,IAAK,KAElCC,WAAa,SAAbA,WAAcC,KAEfF,WAAWG,SAASD,MAAiB,KAATN,MAC5BI,WAAWG,SAASD,MAAQF,WAAWG,SAASP,KAAKA,KAAKQ,OAAS,MAIpEP,QAAQD,KAAOM,KACXF,WAAWG,SAASD,MACtBH,UAAUM,KAAKT,KAAOM,KAAKI,cAI3BC,oBAAsB,SAAtBA,sBACJ,GAAY,KAATX,KAAH,CACA,IAAMY,MAAQZ,KAAKa,MAAM,EAAGb,KAAKQ,OAAS,GAE1C,GADAP,QAAQW,OACK,KAAVA,MACD,OAAOT,UAAU,IAEfC,WAAWG,SAASK,MAAMC,OAAO,IACnCV,UAAUM,KAAKG,MAAMF,WAAWG,MAAM,GAAG,KAGzCV,UAAUM,KAAKG,MAAMF,aAGnBN,WAAWG,SAASK,MAAMC,OAAO,IACnCV,UAAUM,KAAKG,MAAMF,WAAWG,MAAM,GAAG,KAGzCV,UAAUM,KAAKG,MAAMF,eAInBI,SAAW,SAAXA,WACDV,WAAWG,SAASP,KAAKA,KAAKQ,OAAS,KAG1CP,QAAQQ,KAAKT,MAAMU,aAGfK,aAAe,WAEnB,IADA,IAAMC,EAAU,GADS,WAEhBC,GACPD,EAAQE,KACN,qEACAC,QAAS,kBAAMd,WAAWY,EAAEP,aAD5B,SAGGO,GADEA,KAJAA,EAAI,EAAGA,EAAI,GAAIA,IAAM,EAArBA,GAST,OAAOD,GAGT,OACE,kEAAKI,UAAU,MAAf,SACE,mEAAKA,UAAU,cAAf,UACE,mEAAKA,UAAU,UAAf,UACGlB,OAAS,kFAAQA,OAAR,OAA0B,GADtC,OAEGF,MAAQ,OAEX,mEAAKoB,UAAU,aAAf,UACE,qEAAQD,QAAS,kBAAMd,WAAW,MAAlC,eACA,qEAAQc,QAAS,kBAAMd,WAAW,MAAlC,eACA,qEAAQc,QAAS,kBAAMd,WAAW,MAAlC,eACA,qEAAQc,QAAS,kBAAMd,WAAW,MAAlC,eACA,qEAAQc,QAASR,oBAAjB,oBAGF,mEAAKS,UAAU,UAAf,UACGL,eACH,qEAAQI,QAAS,kBAAMd,WAAW,MAAlC,eACA,qEAAQc,QAAS,kBAAMd,WAAW,MAAlC,eACA,qEAAQc,QAASL,SAAjB,uBAOOlB,4B","file":"static/js/main.84235862.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { useState } from \"react\";\n\nfunction App() {\n  const [calc, setCalc] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n\n  const operadores = [\"+\", \"-\", \"*\", \"/\", \".\"];\n\n  const updateCalc = (val: string) => {\n    if(\n      (operadores.includes(val) && calc === '') ||\n      (operadores.includes(val) && operadores.includes(calc[calc.length - 1]))\n      ){\n        return;\n      }\n      setCalc(calc + val);\n      if(!operadores.includes(val)){\n        setResult(eval(calc + val).toString());\n      }\n  }\n\n  const deletarUltimoDigito = () => {\n    if(calc === '') return;\n    const value = calc.slice(0, calc.length - 1);\n    setCalc(value);\n    if(value === ''){\n      return setResult('');\n    }\n    if (operadores.includes(value.slice(-1))) {\n      setResult(eval(value.toString().slice(0,-1)));  \n    }\n    else{\n      setResult(eval(value.toString()));  \n    }\n    \n    if (operadores.includes(value.slice(-1))) {\n      setResult(eval(value.toString().slice(0,-1)));  \n    }\n    else{\n      setResult(eval(value.toString()));  \n    }\n  }\n\n  const calcular = () => {\n    if(operadores.includes(calc[calc.length - 1])){\n      return;\n    }\n    setCalc(eval(calc).toString());\n  }\n\n  const criarDigitos = () => {\n    const digitos = [];\n    for (let i = 1; i < 10; i++) {\n      digitos.push(\n        <button \n        onClick={() => updateCalc(i.toString())} \n        key={i}>\n          {i}\n          </button>\n      );\n    }\n    return digitos;\n  }\n\n  return (\n    <div className=\"App\">\n      <div className='calculadora'>\n        <div className='display'>\n          {result ? <span>({result})</span> : ''}&nbsp;\n          {calc || \"0\"} \n        </div>\n        <div className='operadores'>\n          <button onClick={() => updateCalc(\"/\")}>/</button>\n          <button onClick={() => updateCalc(\"*\")}>*</button>\n          <button onClick={() => updateCalc(\"+\")}>+</button>\n          <button onClick={() => updateCalc(\"-\")}>-</button>\n          <button onClick={deletarUltimoDigito}>DEL</button>\n        </div>\n\n        <div className='digitos'>\n          {criarDigitos()}\n        <button onClick={() => updateCalc('0')}>0</button>\n        <button onClick={() => updateCalc('.')}>.</button>\n        <button onClick={calcular}>=</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"sourceRoot":""}